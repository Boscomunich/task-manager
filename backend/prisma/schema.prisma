generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id
  email             String         @unique
  username          String
  password          String?
  verified          Boolean        @default(false)
  workspacesOwned   Workspace[]    @relation("Owner")
  workspacesWorking Workspace[]    @relation("Worker")
  assignedLists     List[]         @relation("UserLists")
  assignedCards     Card[]         @relation("UserCards")
  notification      Notification[]
}

model Workspace {
  id          String   @id
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  owner       User     @relation("Owner", fields: [userId], references: [id])
  userId      String
  workers     User[]   @relation("Worker")
  lists       List[]
}

model List {
  id          String    @id
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  cards       Card[]
  assignedTo  User[]    @relation("UserLists")
}

model Card {
  id          String      @id
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  list        List        @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId      String
  checkList   CheckList[]
  assignedTo  User[]      @relation("UserCards")
}

model CheckList {
  id      String  @id
  name    String
  checked Boolean @default(false)
  card    Card    @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId  String
}

model Notification {
  id        String   @id
  message   String
  type      String
  projectId String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  owner     User     @relation(fields: [userId], references: [id])
  userId    String
}
